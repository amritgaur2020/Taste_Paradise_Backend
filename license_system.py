"""
TasteParadise License System
Prevents unauthorized use and piracy
"""

import hashlib
import json
import os
import platform
import subprocess
import uuid
from datetime import datetime
from pathlib import Path
import sys

try:
    import requests
    REQUESTS_AVAILABLE = True
except ImportError:
    REQUESTS_AVAILABLE = False
    print("‚ö†Ô∏è  'requests' module not installed. Online validation disabled.")

# Configuration
LICENSE_FILE = Path("taste_paradise.license")
LICENSE_DB = Path("licenses_db.json")  # Database of valid licenses
SECRET_KEY = "TasteParadise_Secret_2025_UTU_Project"  # Must match generator!

class LicenseSystem:
    """Handle all license operations"""
    
    def __init__(self):
        self.license_file = LICENSE_FILE
        self.license_db = LICENSE_DB
        self.secret_key = SECRET_KEY
    
    def get_machine_id(self):
        """
        Generate unique hardware fingerprint
        This will be different on every computer
        """
        identifiers = []
        
        try:
            # 1. MAC Address (most reliable)
            mac = ':'.join(['{:02x}'.format((uuid.getnode() >> i) & 0xff) 
                          for i in range(0, 48, 8)])
            identifiers.append(mac)
            
            # 2. Computer name
            identifiers.append(platform.node())
            
            # 3. Platform info
            identifiers.append(platform.platform())
            
            # 4. CPU info (Windows only)
            if platform.system() == "Windows":
                try:
                    cpu_info = subprocess.check_output(
                        "wmic cpu get ProcessorId", 
                        shell=True,
                        stderr=subprocess.DEVNULL
                    ).decode().split('\n')[1].strip()
                    identifiers.append(cpu_info)
                except:
                    pass
            
            # 5. Combine and hash
            combined = '|'.join(filter(None, identifiers))
            machine_hash = hashlib.sha256(combined.encode()).hexdigest()
            return machine_hash[:16].upper()
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Error generating machine ID: {e}")
            # Fallback to UUID
            return str(uuid.getnode())[:16].upper()
    
    def validate_key_format(self, key):
        """Check if license key has correct format"""
        if not key or not isinstance(key, str):
            return False
        
        key = key.strip().upper()
        
        # Format: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX (25 chars + 4 dashes)
        if len(key) != 29:
            return False
        if key.count('-') != 4:
            return False
        
        segments = key.split('-')
        if any(len(seg) != 5 for seg in segments):
            return False
        
        return True
    
    def load_license_database(self):
        """Load the database of valid licenses generated by you"""
        try:
            if not self.license_db.exists():
                print(f"‚ùå License database not found!")
                print(f"   Expected at: {self.license_db.absolute()}")
                return []
            
            with open(self.license_db, 'r') as f:
                licenses = json.load(f)
                return licenses
        except Exception as e:
            print(f"‚ö†Ô∏è  Error loading license database: {e}")
            return []
    
    def validate_against_database(self, license_key):
        """
        Validate that the license key exists in your database
        This is the KEY security check!
        """
        licenses = self.load_license_database()
        
        for lic in licenses:
            if lic['key'] == license_key:
                # Found the license - check if it's valid
                
                # Check if revoked
                if lic.get('revoked'):
                    return {
                        'valid': False,
                        'reason': f"License revoked on {lic.get('revoked_date', 'N/A')[:10]}"
                    }
                
                # Check expiry
                try:
                    expiry = datetime.fromisoformat(lic['expiry_date'])
                    if datetime.now() > expiry:
                        return {
                            'valid': False,
                            'reason': f"License expired on {expiry.date()}"
                        }
                except:
                    pass
                
                # License is valid!
                return {
                    'valid': True,
                    'customer': lic.get('customer', 'Licensed User'),
                    'email': lic.get('email', ''),
                    'plan': lic.get('plan', 'standard'),
                    'expiry_date': lic.get('expiry_date'),
                    'license_data': lic
                }
        
        # License key not found in database
        return {
            'valid': False,
            'reason': 'License key not found in database'
        }
    
    def update_license_activation(self, license_key, machine_id):
        """Update the license database to mark as activated"""
        try:
            licenses = self.load_license_database()
            
            for lic in licenses:
                if lic['key'] == license_key:
                    # Check if already activated on different machine
                    if lic.get('activated') and lic.get('machine_id') != machine_id:
                        return {
                            'valid': False,
                            'reason': f"License already activated on another computer (Machine ID: {lic.get('machine_id')})"
                        }
                    
                    # Activate or verify
                    lic['activated'] = True
                    lic['machine_id'] = machine_id
                    if not lic.get('activation_date'):
                        lic['activation_date'] = datetime.now().isoformat()
                    
                    # Save updated database
                    with open(self.license_db, 'w') as f:
                        json.dump(licenses, f, indent=2)
                    
                    return {'valid': True}
            
            return {'valid': False, 'reason': 'License not found'}
        
        except Exception as e:
            print(f"‚ö†Ô∏è  Error updating activation: {e}")
            return {'valid': True}  # Don't block on DB error
    
    def activate_license(self):
        """
        First-time activation
        User enters their license key
        """
        print("\n" + "="*70)
        print("üîí TASTEPARADISE LICENSE ACTIVATION")
        print("="*70)
        print("\nüìß Please enter your license key")
        print("   (You received this key via email after purchase)")
        print("   Format: XXXXX-XXXXX-XXXXX-XXXXX-XXXXX")
        print("-"*70)
        
        # Get license key from user
        max_attempts = 3
        for attempt in range(max_attempts):
            license_key = input("\nLicense Key: ").strip().upper()
            
            # Check format
            if not self.validate_key_format(license_key):
                print(f"‚ùå Invalid format! ({attempt + 1}/{max_attempts} attempts)")
                if attempt < max_attempts - 1:
                    print("   Please check and try again.")
                continue
            
            # Get machine ID
            machine_id = self.get_machine_id()
            print(f"\nüîë Machine ID: {machine_id}")
            print("‚è≥ Validating license...")
            
            # CRITICAL: Validate against YOUR database
            validation = self.validate_against_database(license_key)
            
            if not validation['valid']:
                print(f"\n‚ùå ACTIVATION FAILED: {validation['reason']}")
                if attempt < max_attempts - 1:
                    print(f"   ({attempt + 1}/{max_attempts} attempts) Please try again.")
                continue
            
            # Update activation status in database
            activation_result = self.update_license_activation(license_key, machine_id)
            
            if not activation_result['valid']:
                print(f"\n‚ùå ACTIVATION FAILED: {activation_result['reason']}")
                if attempt < max_attempts - 1:
                    print(f"   ({attempt + 1}/{max_attempts} attempts) Please try again.")
                continue
            
            # Save license locally
            license_data = {
                'key': license_key,
                'machine_id': machine_id,
                'activated_date': datetime.now().isoformat(),
                'customer': validation.get('customer', 'Licensed User'),
                'email': validation.get('email', ''),
                'plan': validation.get('plan', 'standard'),
                'expiry_date': validation.get('expiry_date'),
            }
            
            # Encrypt and save
            self._save_license(license_data)
            
            print("\n" + "="*70)
            print("‚úÖ LICENSE ACTIVATED SUCCESSFULLY!")
            print("="*70)
            print(f"üë§ Licensed to: {license_data['customer']}")
            print(f"üìß Email: {license_data['email']}")
            print(f"üì¶ Plan: {license_data['plan'].upper()}")
            print(f"üìÖ Valid until: {license_data['expiry_date'][:10]}")
            print("="*70)
            
            return True
        
        # All attempts failed
        print("\n‚ùå Maximum activation attempts reached!")
        print("   Please contact support with a valid license key.")
        return False
    
    def verify_license(self):
        """
        Verify license on every app start
        Returns True if valid, False otherwise
        """
        # Check if license file exists
        if not self.license_file.exists():
            return self.activate_license()
        
        try:
            # Load license data
            license_data = self._load_license()
            
            # 1. Verify machine ID (prevent copying)
            current_machine_id = self.get_machine_id()
            if license_data['machine_id'] != current_machine_id:
                print("\n" + "="*70)
                print("‚ùå LICENSE ERROR: Wrong Computer!")
                print("="*70)
                print("   This license is registered to another computer.")
                print("   Each license can only be used on ONE computer.")
                print("\nüí° To transfer license:")
                print("   Contact: [email protected]")
                print("="*70)
                return False
            
            # 2. Validate against database (prevent fake/revoked licenses)
            validation = self.validate_against_database(license_data['key'])
            
            if not validation['valid']:
                print("\n" + "="*70)
                print("‚ùå LICENSE VALIDATION FAILED!")
                print("="*70)
                print(f"   Reason: {validation['reason']}")
                print("\nüí° Contact support:")
                print("   Email: [email protected]")
                print("="*70)
                return False
            
            # 3. Check expiry date
            expiry = datetime.fromisoformat(license_data['expiry_date'])
            if datetime.now() > expiry:
                print("\n" + "="*70)
                print("‚ùå LICENSE EXPIRED!")
                print("="*70)
                print(f"   Expired on: {expiry.date()}")
                print("\nüí∞ Renew your license:")
                print("   Visit: https://yourwebsite.com/renew")
                print("   Contact: [email protected]")
                print("="*70)
                return False
            
            # All checks passed
            days_remaining = (expiry - datetime.now()).days
            print(f"\n‚úÖ License valid - {days_remaining} days remaining")
            print(f"   Licensed to: {license_data['customer']}")
            
            return True
        
        except Exception as e:
            print(f"\n‚ùå Error verifying license: {e}")
            print("   License file may be corrupted.")
            print("   Delete 'taste_paradise.license' and restart to re-activate.")
            return False
    
    def _save_license(self, data):
        """Save license data (encrypted)"""
        try:
            # Simple encryption (encode to prevent easy reading)
            json_str = json.dumps(data, indent=2)
            encoded = json_str.encode('utf-8').hex()
            
            with open(self.license_file, 'w') as f:
                f.write(encoded)
        except Exception as e:
            print(f"‚ö†Ô∏è  Error saving license: {e}")
    
    def _load_license(self):
        """Load and decrypt license data"""
        try:
            with open(self.license_file, 'r') as f:
                encoded = f.read()
            
            # Decrypt
            json_str = bytes.fromhex(encoded).decode('utf-8')
            return json.loads(json_str)
        except Exception as e:
            raise Exception(f"Failed to load license: {e}")
    
    def get_license_info(self):
        """Get current license information"""
        if not self.license_file.exists():
            return None
        
        try:
            return self._load_license()
        except:
            return None


# Global instance
license_checker = LicenseSystem()


def check_license():
    """
    Main license check function - wrapper for the class method
    Returns: True if valid, False otherwise
    """
    return license_checker.verify_license()
    # Load license database
    licenses = load_licenses()
    
    # Check if local license file exists
    if not os.path.exists(LICENSE_FILE):
        # First time - need activation
        return activate_license(licenses)
    
    # Load existing license
    try:
        with open(LICENSE_FILE, 'r') as f:
            local_license = json.load(f)
    except:
        print("‚ùå ERROR: Invalid license file")
        return False, None, "License file corrupted"
    
    # Get stored info
    stored_key = local_license.get('key')
    stored_machine_id = local_license.get('machine_id')
    
    # Find license in database
    license_info = None
    for lic in licenses:
        if lic['key'] == stored_key:
            license_info = lic
            break
    
    if not license_info:
        print("‚ùå ERROR: License key not found in database")
        return False, None, "License key invalid"
    
    # ============================================
    # CHECK #1: REVOCATION STATUS (CRITICAL!)
    # ============================================
    if license_info.get('revoked', False):
        print("‚ùå ACTIVATION FAILED: License has been revoked")
        print("   Contact support to reactivate your license")
        print(f"   Support: support@yourcompany.com")
        
        # DELETE local license file
        try:
            os.remove(LICENSE_FILE)
            print("   Local license file removed.")
        except:
            pass
        
        return False, None, "License revoked"
    
    # ============================================
    # CHECK #2: MACHINE ID
    # ============================================
    current_machine_id = get_machine_id()
    if stored_machine_id != current_machine_id:
        print("‚ùå ERROR: Machine ID mismatch")
        print(f"   This license is registered to a different computer")
        return False, None, "Machine ID mismatch"
    
    # ============================================
    # CHECK #3: EXPIRY DATE
    # ============================================
    try:
        expiry = datetime.fromisoformat(license_info['expiry_date'])
        if datetime.now() > expiry:
            print("‚ùå ERROR: License expired")
            print(f"   Expired on: {expiry.strftime('%Y-%m-%d')}")
            print(f"   Contact support to renew")
            return False, None, "License expired"
    except:
        pass
    
    # ============================================
    # CHECK #4: ONLINE VALIDATION (if enabled)
    # ============================================
    # Try online validation (optional)
    # This checks if license was revoked remotely
    # (Skip if offline)
    
    # All checks passed!
    print("‚úÖ LICENSE VALID")
    print(f"   Licensed to: {license_info.get('customer', 'Unknown')}")
    print(f"   Plan: {license_info.get('plan', 'Unknown').upper()}")
    print(f"   Valid until: {license_info.get('expiry_date', 'Unknown')[:10]}")
    
    return True, license_info, None

